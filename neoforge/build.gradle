plugins {
    id 'idea'
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.82'
}

version = "${version}-neoforge"
base.archivesName = mod_id

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")
}

Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>
tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
        mod_author: mod_author, mod_description: mod_description,
        mod_url: mod_url, mod_issues: mod_issues, side: neoforge_side
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
    from project(":common").sourceSets.main.resources
}